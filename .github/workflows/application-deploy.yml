name: Application Deployment

on:
  push:
    branches:
      - dev
      - staging
      - main

env:
  AWS_REGION: us-east-1
  ROLE_TO_ASSUME: arn:aws:iam::${{ secrets.YOUR_AWS_ACCOUNT_ID }}:role/github-workflow-role
  ROLE_SESSION_NAME: GitHub_to_AWS_via_FederatedOIDC
  PROJECT_NAME: spring

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read # This is required for actions/checkout

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    defaults:
     run:
      working-directory: ./applications

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set Up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build with Maven
        run: mvn clean package -DskipTests

      - name: Run Unit Tests
        run: mvn test
  dockerize-and-push-to-dev-or-staging:
    runs-on: ubuntu-latest
    needs: build-and-test
    defaults:
     run:
      working-directory: ./applications
    if: github.ref_name == 'staging' || github.ref_name == 'dev' # Only run for dev or staging

    steps:
      - name: Set short git commit SHA
        id: commit
        uses: prompt/actions-commit-hash@v2

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set environment variable dynamically
        id: set-env
        run: |
          echo "ENVIRONMENT=${{ github.ref_name }}" >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_TO_ASSUME }}
          role-session-name: ${{ env.ROLE_SESSION_NAME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ env.ENVIRONMENT }}-${{ env.PROJECT_NAME }}-task --query taskDefinition > task-definition.json
     

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }} 
          ECR_REPOSITORY: ${{ env.ENVIRONMENT }}-${{ env.PROJECT_NAME }}-repo       
          IMAGE_TAG: ${{ steps.commit.outputs.short }}
          
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
      - name: Fill in the new image ID in the AWS ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.ENVIRONMENT }}-${{ env.PROJECT_NAME }}-app
          image: ${{ steps.build-image.outputs.image }}

      # Step 6: Deploy to EKS (Optional for now)
      # - name: Update kube config
      #   env:
      #     EKS_CLUSTER_NAME: ${{ env.ENVIRONMENT }}-spring-cluster
      #   run: aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --region $AWS_REGION
        
      # - name: Install dependencies
      #   run: |
      #     sudo apt-get update
      #     sudo apt-get install -y jq postgresql-client
  
      # - name: Run database and secrets script
      #   run: |
      #     chmod +x ./applications/manifests/handle-secrets-and-db.sh
      #     ./applications/manifests/handle-secrets-and-db.sh

      # - name: Deploy to EKS
      #   env:
      #     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      #     ECR_REPOSITORY: ${{ env.ENVIRONMENT }}-spring-repository        
      #     IMAGE_TAG: ${{ steps.commit.outputs.short }}
      #   run: |
      #     sed -i.bak "s|DOCKER_IMAGE|$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG|g" manifests/hello-app-deployment.yaml && \
      #     kubectl apply -f manifests/hello-app-deployment.yaml
      #     kubectl apply -f manifests/hello-app-service.yaml
  dockerize-and-push-to-production:
    needs: build-and-test
    runs-on: ubuntu-latest
    defaults:
     run:
      working-directory: ./applications
    if: github.ref_name == 'main' # Only run for main

    environment:
      name: production
    steps:
      - name: Set environment variable to prod
        run: echo "ENVIRONMENT=prod" >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }} 
          ECR_REPOSITORY: ${{ env.ENVIRONMENT }}-spring-repo       
          IMAGE_TAG: ${{ steps.commit.outputs.short }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
  
    # Step 6: Deploy to EKS (Optional for now)
      - name: Update kube config
        env:
          EKS_CLUSTER_NAME: ${{ env.ENVIRONMENT }}-spring-cluster
        run: aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --region $AWS_REGION
        
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq postgresql-client
  
      - name: Run database and secrets script
        run: |
          chmod +x ./applications/manifests/handle-secrets-and-db.sh
          ./applications/manifests/handle-secrets-and-db.sh

    # - name: Deploy to EKS
    #   env:
    #     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
    #     ECR_REPOSITORY: ${{ env.ENVIRONMENT }}-spring-repository        
    #     IMAGE_TAG: ${{ steps.commit.outputs.short }}
    #   run: |
    #     sed -i.bak "s|DOCKER_IMAGE|$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG|g" manifests/hello-app-deployment.yaml && \
    #     kubectl apply -f manifests/hello-app-deployment.yaml
    #     kubectl apply -f manifests/hello-app-service.yaml