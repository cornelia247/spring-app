name: Application Deployment

on:
  push:
    paths:
      - "applications/**"
    branches:
      - dev
      - staging
      - main
      - grafana
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ROLE_TO_ASSUME: arn:aws:iam::${{ secrets.YOUR_AWS_ACCOUNT_ID }}:role/${{ vars.YOUR_AWS_GITHUB_ROLE}}
  ROLE_SESSION_NAME: GitHub_to_AWS_via_FederatedOIDC
  PROJECT_NAME: ${{ vars.PROJECT_NAME }}

permissions:
  id-token: write 
  contents: read 

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    defaults:
     run:
      working-directory: ./applications

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set Up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build with Maven
        run: mvn clean package -DskipTests

      - name: Run Unit Tests
        run: mvn test
  dockerize-and-push-to-dev-or-staging:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref_name != 'main' 
    defaults:
     run:
      working-directory: ./applications
    steps:
      - name: Set short git commit SHA
        id: commit
        uses: prompt/actions-commit-hash@v2

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set environment variable dynamically
        id: set-env
        run: |
          echo "ENVIRONMENT=${{ github.ref_name }}" >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_TO_ASSUME }}
          role-session-name: ${{ env.ROLE_SESSION_NAME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ env.ENVIRONMENT }}-${{ env.PROJECT_NAME }}-task --query taskDefinition > ${{ github.workspace }}/task-definition.json

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }} 
          ECR_REPOSITORY: ${{ env.ENVIRONMENT }}-${{ env.PROJECT_NAME }}-repo       
          IMAGE_TAG: ${{ steps.commit.outputs.short }}
          
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Fill in the new image ID in the AWS ECS task definition
        id: task-def
        
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.ENVIRONMENT }}-${{ env.PROJECT_NAME }}-app
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy AWS ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
            task-definition: ${{ steps.task-def.outputs.task-definition }}
            service: ${{ env.ENVIRONMENT }}-${{ env.PROJECT_NAME }}-service
            cluster: ${{ env.ENVIRONMENT }}-${{ env.PROJECT_NAME }}-ecs

  dockerize-and-push-to-production:
    needs: build-and-test
    if: github.ref_name == 'main' 
    runs-on: ubuntu-latest
    defaults:
     run:
      working-directory: ./applications

    environment:
      name: production

    steps:
        - name: Set short git commit SHA
          id: commit
          uses: prompt/actions-commit-hash@v2
  
        - name: Checkout code
          uses: actions/checkout@v3
  
        - name: Set environment variable dynamically
          id: set-env
          run: echo "ENVIRONMENT=prod" >> $GITHUB_ENV
  
        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v4
          with:
            role-to-assume: ${{ env.ROLE_TO_ASSUME }}
            role-session-name: ${{ env.ROLE_SESSION_NAME }}
            aws-region: ${{ env.AWS_REGION }}
  
        - name: Login to Amazon ECR
          id: login-ecr
          uses: aws-actions/amazon-ecr-login@v1
  
        - name: Download task definition
          run: |
            aws ecs describe-task-definition --task-definition ${{ env.ENVIRONMENT }}-${{ env.PROJECT_NAME }}-task --query taskDefinition > ${{ github.workspace }}/task-definition.json
  
        - name: Build, tag, and push image to Amazon ECR
          id: build-image
          env:
            ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }} 
            ECR_REPOSITORY: ${{ env.ENVIRONMENT }}-${{ env.PROJECT_NAME }}-repo       
            IMAGE_TAG: ${{ steps.commit.outputs.short }}
            
          run: |
            docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile .
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
            echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
  
        - name: Fill in the new image ID in the AWS ECS task definition
          id: task-def
          
          uses: aws-actions/amazon-ecs-render-task-definition@v1
          with:
            task-definition: task-definition.json
            container-name: ${{ env.ENVIRONMENT }}-${{ env.PROJECT_NAME }}-app
            image: ${{ steps.build-image.outputs.image }}
  
        - name: Deploy AWS ECS task definition
          uses: aws-actions/amazon-ecs-deploy-task-definition@v1
          with:
              task-definition: ${{ steps.task-def.outputs.task-definition }}
              service: ${{ env.ENVIRONMENT }}-${{ env.PROJECT_NAME }}-service
              cluster: ${{ env.ENVIRONMENT }}-${{ env.PROJECT_NAME }}-ecs

