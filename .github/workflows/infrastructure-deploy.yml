name: Infrastructure Deployment

on:
  push:
    paths:
      - "infrastructure/**"
    branches:
      - main
      - staging
      - develop
jobs:
  setup:
    name: Setup Environment
    runs-on: ubuntu-latest

    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

    outputs:
      backend_key: ${{ steps.set-keys.outputs.backend_key }}
      vars_file: ${{ steps.set-keys.outputs.vars_file }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Set Terraform Keys
        id: set-keys
        run: |
          if [[ "${{ github.ref_name }}" == "main" ]]; then
            echo "vars_file=prod.tfvars" >> $GITHUB_ENV
          else
            echo "vars_file=${{ github.ref_name }}.tfvars" >> $GITHUB_ENV
          fi

  plan:
    name: Terraform Plan
    needs: setup
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Terraform Init
        run: terraform init 

      - name: Terraform Plan
        id: save-plan
        run: terraform plan -var-file="${{ env.vars_file }}" -out=tfplan

  apply:
    name: Terraform Apply
    needs: plan
    runs-on: ubuntu-latest
    if: github.ref_name != 'main'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Terraform Init
        run: terraform init 

      - name: Apply the Plan
        run: terraform apply tfplan

  prod-apply:
    name: Terraform Apply for Production
    needs: plan
    runs-on: ubuntu-latest
    if: github.ref_name == 'main'

    environment:
      name: production

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Terraform Init
        run: terraform init 

      - name: Terraform Apply (Requires Approval)
        run: terraform apply tfplan

  destroy:
    name: Destroy Infrastructure
    needs: [apply, prod-apply]
    runs-on: ubuntu-latest
    environment:
      name: destruction

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Terraform Init
        run: terraform init 

      - name: Destroy Infrastructure
        run: terraform destroy -var-file="${{ env.vars_file }}" -auto-approve




# name: Infrastructure Deployment

# on:
#   push:
#     paths:
#       - "infrastructure/**"
#     branches:
#       - main
#       - staging
#       - develop
#   workflow_dispatch:

# env:
#   TF_VAR_environment: ${{ github.ref_name }}

# jobs:
#   terraform-init:
#     name: Initialize Terraform
#     runs-on: ubuntu-latest

#     env:
#       ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
#       ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
#       ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
#       ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v3

#       - name: Install Terraform
#         uses: hashicorp/setup-terraform@v2
#         with:
#           terraform_version: 1.5.0

#       - name: Terraform Init
#         run: terraform init -backend-config="key=${{ github.ref_name }}.tfstate"

#   terraform-apply:
#     name: Apply Infrastructure
#     needs: terraform-init
#     runs-on: ubuntu-latest
#     environment: apply

#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v3

#       - name: Install Terraform
#         uses: hashicorp/setup-terraform@v2
#         with:
#           terraform_version: 1.5.0

#       - name: Terraform Plan
#         run: terraform plan -var-file="${{ github.ref_name }}.tfvars"

#       - name: Terraform Apply
#         run: terraform apply -var-file="${{ github.ref_name }}.tfvars" -auto-approve

#   terraform-destroy:
#     name: Destroy Infrastructure
#     needs: terraform-apply
#     runs-on: ubuntu-latest
#     environment: destroy

#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v3

#       - name: Install Terraform
#         uses: hashicorp/setup-terraform@v2
#         with:
#           terraform_version: 1.5.0

#       - name: Terraform Destroy
#         run: terraform destroy -var-file="${{ github.ref_name }}.tfvars" -auto-approve