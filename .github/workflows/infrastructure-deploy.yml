name: Infrastructure Deployment

on:
  push:
    paths:
      - "infrastructure/**"
      - ".github/workflows/infrastructure-deploy.yml"
    branches:
      - main
      - staging
      - dev
      - grafana

  # workflow_dispatch:


env:
  AWS_REGION: us-east-1
  ROLE_TO_ASSUME: arn:aws:iam::${{ secrets.YOUR_AWS_ACCOUNT_ID }}:role/${{ vars.YOUR_AWS_GITHUB_ROLE }}
  ROLE_SESSION_NAME: GitHub_to_AWS_via_FederatedOIDC
  TF_VERSION: 1.9.8
  ENVIRONMENT: ${{ github.ref_name == 'main' && 'prod' || github.ref_name }}

permissions:
  id-token: write 
  contents: read 

jobs:
  setup:
    name: Setup Environment
    runs-on: ubuntu-latest
    defaults:
     run:
       shell: bash
       working-directory: ./infrastructure

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_TO_ASSUME }}
          role-session-name: ${{ env.ROLE_SESSION_NAME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{env.TF_VERSION}}

      - name: Terraform Init
        run:
            terraform init

  plan:
    name: Terraform Plan
    needs: setup
    runs-on: ubuntu-latest
    defaults:
     run:
       shell: bash
       working-directory: ./infrastructure

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_TO_ASSUME }}
          role-session-name: ${{ env.ROLE_SESSION_NAME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{env.TF_VERSION}}
      
      - name: Terraform Init
        run:
            terraform init

      - name: Terraform Plan
        run: terraform plan -var-file=${{env.ENVIRONMENT}}.tfvars 

  apply:
    name: Terraform Apply
    needs: plan
    if: github.ref_name != 'main'
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./infrastructure
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_TO_ASSUME }}
          role-session-name: ${{ env.ROLE_SESSION_NAME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{env.TF_VERSION}}

      - name: Terraform Init
        run:
              terraform init

      - name: Apply the Plan
        run: terraform apply -var-file=${{env.ENVIRONMENT}}.tfvars --auto-approve
       # Step 1: Fetch Terraform Outputs
      - name: Get Terraform Outputs
        id: tf_outputs
        run: |
          EFS_ID=$(terraform output -raw efs_file_system_id 2>/dev/null || echo "")
          APP_LOG_GROUP=$(terraform output -raw app_log_group 2>/dev/null || echo "")
          GRAFANA_LOG_GROUP=$(terraform output -raw grafana_log_group 2>/dev/null || echo "")
          ECS_CLUSTER_NAME=$(terraform output -raw ecs_cluster_name 2>/dev/null || echo "")
          ECS_APP_SERVICE_NAME=$(terraform output -raw ecs_app_service_name 2>/dev/null || echo "")
          ECS_GRAFANA_SERVICE_NAME=$(terraform output -raw ecs_grafana_service_name 2>/dev/null || echo "")

          echo "EFS_ID=${EFS_ID}" >> $GITHUB_ENV
          echo "APP_LOG_GROUP=${APP_LOG_GROUP}" >> $GITHUB_ENV
          echo "GRAFANA_LOG_GROUP=${GRAFANA_LOG_GROUP}" >> $GITHUB_ENV
          echo "ECS_CLUSTER_NAME=${ECS_CLUSTER_NAME}" >> $GITHUB_ENV
          echo "ECS_APP_SERVICE_NAME=${ECS_APP_SERVICE_NAME}" >> $GITHUB_ENV
          echo "ECS_GRAFANA_SERVICE_NAME=${ECS_GRAFANA_SERVICE_NAME}" >> $GITHUB_ENV
          echo ${{ env.EFS_ID }}
          echo ${{ env.ECS_APP_SERVICE_NAME }}

     # Step 2: Replace Placeholders in Datasource and Dashboard
      - name: Replace Placeholders in Datasource and Dashboard
        run: |
         # Replace placeholders in datasource.yaml
         pwd
         ls
         sed -i "s/\${AWS_REGION}/${{ env.AWS_REGION }}/g" ./templates/monitoring/datasource.yaml
         
         # Replace placeholders in dashboard.json
         sed -i "s/\${AWS_REGION}/${{ env.AWS_REGION }}/g" ./templates/monitoring/dashboard.json
         sed -i "s/\${LOG_GROUP_1}/${{ env.APP_LOG_GROUP }}/g" ./templates/monitoring/dashboard.json
         sed -i "s/\${LOG_GROUP_2}/${{ env.GRAFANA_LOG_GROUP }}/g" ./templates/monitoring/dashboard.json
         sed -i "s/\${ECS_CLUSTER_NAME}/${{ env.ECS_CLUSTER_NAME }}/g" ./templates/monitoring/dashboard.json
         sed -i "s/\${ECS_SERVICE_NAME_1}/${{ env.ECS_APP_SERVICE_NAME }}/g" ./templates/monitoring/dashboard.json
         sed -i "s/\${ECS_SERVICE_NAME_2}/${{ env.ECS_GRAFANA_SERVICE_NAME }}/g" ./templates/monitoring/dashboard.json

     # Step 3: Copy Files to EFS
      - name: Copy Datasource and Dashboard to EFS
        run: |
         sudo apt-get update && sudo apt-get install -y amazon-efs-utils
         sudo mkdir -p /mnt/efs
         sudo mount -t efs ${EFS_ID}:/ /mnt/efs
         sudo cp ./templates/monitoring/datasource.yaml /mnt/efs/grafana/provisioning/datasources/
         sudo cp ./templates/monitoring/dashboard.json /mnt/efs/grafana/provisioning/dashboards/
         sudo umount /mnt/efs
         

     # Step 4: Restart Grafana ECS Task
      - name: Restart Grafana ECS Task
        run: |
         aws ecs update-service --cluster "${{ env.ECS_CLUSTER_NAME }}" --service "grafana-service" --force-new-deployment

  prod-apply:
    name: Terraform Apply for Production
    needs: plan
    if: github.ref_name == 'main'
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./infrastructure
    environment:
      name: production
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_TO_ASSUME }}
          role-session-name: ${{ env.ROLE_SESSION_NAME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{env.TF_VERSION}}

      - name: Terraform Init
        run: terraform init
          

      - name: Terraform Apply 
        run: terraform apply -var-file=${{env.ENVIRONMENT}}.tfvars --auto-approve

  