name: Infrastructure Deployment

on:
  push:
    paths:
      - "infrastructure/**"
    branches:
      - main
      - staging
      - dev

  workflow_dispatch:


env:
  AWS_REGION: us-east-1
  ROLE_TO_ASSUME: arn:aws:iam::${{ secrets.YOUR_AWS_ACCOUNT_ID }}:role/github-workflow-role
  ROLE_SESSION_NAME: GitHub_to_AWS_via_FederatedOIDC
  TF_VERSION: 1.9.8
  ENVIRONMENT: ${{ github.ref_name == 'main' && 'prod' || github.ref_name }}

permissions:
  id-token: write 
  contents: read 

jobs:
  setup:
    name: Setup Environment
    runs-on: ubuntu-latest
    defaults:
     run:
       shell: bash
       working-directory: ./infrastructure

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_TO_ASSUME }}
          role-session-name: ${{ env.ROLE_SESSION_NAME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{env.TF_VERSION}}

      - name: Terraform Init
        run:
            terraform init

  plan:
    name: Terraform Plan
    needs: setup
    runs-on: ubuntu-latest
    defaults:
     run:
       shell: bash
       working-directory: ./infrastructure

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_TO_ASSUME }}
          role-session-name: ${{ env.ROLE_SESSION_NAME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{env.TF_VERSION}}
      
      - name: Terraform Init
        run:
            terraform init

      - name: Terraform Plan
        run: terraform plan -var-file=${{env.ENVIRONMENT}}.tfvars 

  apply:
    name: Terraform Apply
    needs: plan
    if: github.ref_name == 'staging' || github.ref_name == 'dev'
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./infrastructure
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_TO_ASSUME }}
          role-session-name: ${{ env.ROLE_SESSION_NAME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{env.TF_VERSION}}

      - name: Terraform Init
        run:
              terraform init

      - name: Apply the Plan
        run: terraform apply -var-file=${{env.ENVIRONMENT}}.tfvars --auto-approve

  prod-apply:
    name: Terraform Apply for Production
    needs: plan
    if: github.ref_name == 'main'
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./infrastructure
    environment:
      name: production
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_TO_ASSUME }}
          role-session-name: ${{ env.ROLE_SESSION_NAME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{env.TF_VERSION}}

      - name: Terraform Init
        run:
              terraform init

      - name: Terraform Apply 
        run: terraform apply -var-file=${{env.ENVIRONMENT}}.tfvars --auto-approve

  destroy:
    name: Terraform Destroy
    needs:
        - apply
        - prod-apply
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    defaults:
      run:
        shell: bash
        working-directory: ./infrastructure
    environment:
      name: destroy
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_TO_ASSUME }}
          role-session-name: ${{ env.ROLE_SESSION_NAME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{env.TF_VERSION}}

      - name: Terraform Init
        run:
             terraform init

      - name: Terraform Destroy 
        run: terraform destroy -var-file=${{env.ENVIRONMENT}}.tfvars --auto-approve